Assignment - 2 (Module-2(PPT))

Q1. What are the Conditional Operators in Java?
In Java, the conditional operators are:

&& (logical AND): Returns true if both operands are true.
|| (logical OR): Returns true if at least one of the operands is true.
! (logical NOT): Returns the opposite boolean value of the operand.


Q2. What are the types of operators based on the number of operands?
Based on the number of operands, operators in Java can be categorized into three types:

Unary operators: These operators work with a single operand, such as increment (++), decrement (--), logical NOT (!), etc.
Binary operators: These operators work with two operands, such as arithmetic operators (+, -, *, /), comparison operators (==, !=, <, >, <=, >=), logical operators (&&, ||), etc.
Ternary operator: There is only one ternary operator in Java, which is the conditional operator (?:). It takes three operands and is used for conditional expressions.


Q3. What is the use of Switch case in Java programming?
The switch statement in Java allows you to select one of many code blocks to be executed. It provides an alternative to using multiple if-else-if statements. The switch statement evaluates an expression and compares it to various cases. If a match is found, the corresponding block of code is executed. It is often used when you have a limited number of possible values or conditions to check.


Q4. What are the conditional Statements and use of conditional statements in Java?
Conditional statements in Java allow you to execute different blocks of code based on certain conditions. The two main conditional statements in Java are:

if statement: It executes a block of code if a given condition is true. If the condition is false, the code block is skipped.
if-else statement: It extends the if statement by providing an alternative block of code to execute if the condition is false.
Conditional statements are used to control the flow of a program based on specific conditions. They enable you to create dynamic and decision-based behavior in your programs.

Q5. What is the syntax of if-else statement?
The syntax of the if-else statement in Java is as follows:

if (condition) {
    // code to be executed if the condition is true
} else {
    // code to be executed if the condition is false
}

The "condition" is a boolean expression that determines which block of code to execute. If the condition evaluates to true, the code inside the if block is executed. Otherwise, if the condition evaluates to false, the code inside the else block is executed.


Q6. How do you compare two strings in Java?
In Java, you can compare strings using the equals() method or the compareTo() method. Here are examples of both approaches:

Using equals() method:

String str1 = "Hello";
String str2 = "World";

if (str1.equals(str2)) {
    System.out.println("The strings are equal.");
} else {
    System.out.println("The strings are not equal.");
}

Using compareTo() method:

String str1 = "Hello";
String str2 = "World";

int result = str1.compareTo(str2);

if (result == 0) {
    System.out.println("The strings are equal.");
} else if (result < 0) {
    System.out.println("str1 comes before str2.");
} else {
    System.out.println("str1 comes after str2.");
}

Q7. What is Mutable String in Java? Explain with an example.

In Java, the String class is immutable, which means once a string object is created, its value cannot be changed. However, there is a mutable counterpart to String called StringBuilder or StringBuffer. These classes provide methods for modifying the content of a string without creating a new string object.

Here's an example using StringBuilder:

StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");  // Appending " World" to the original string
sb.insert(5, ",");    // Inserting a comma at index 5
sb.deleteCharAt(11);  // Deleting the character at index 11
String result = sb.toString();  // Converting the StringBuilder back to a String

System.out.println(result);  // Output: Hello, World
In this example, the StringBuilder object sb allows us to perform various operations such as appending, inserting, and deleting characters from the original string. Finally, we convert the StringBuilder back to a String using the toString() method.

The StringBuilder class provides mutable string operations, which can be useful in scenarios where frequent modifications are required, such as concatenating strings in a loop or building dynamic strings.


Q8. Write a program to sort a String alphabetically.

To sort a string alphabetically in Java, you can convert the string to an array of characters, sort the array using the Arrays.sort() method, and then create a new string from the sorted array. Here's an example:

import java.util.Arrays;
public class StringSortExample {
    public static void main(String[] args) {
        String input = "anirudh";
        char[] charArray = input.toCharArray();

        // Sort the array
        Arrays.sort(charArray);

        // Create a new string from the sorted array
        String sortedString = new String(charArray);

        System.out.println("Original String: " + input);
        System.out.println("Sorted String: " + sortedString);
    }
}

ðŸ’¡ Q9. Write a program to check if the letter 'e' is present in the word 'Umbrella'.

To check if a specific letter is present in a word in Java, you can use the contains() method of the String class. Here's an example:

java
Copy code
public class LetterCheckExample {
    public static void main(String[] args) {
        String word = "Umbrella";
        char letter = 'e';

        // Check if the letter is present
        boolean isPresent = word.contains(Character.toString(letter));

        if (isPresent) {
            System.out.println("The letter '" + letter + "' is present in the word.");
        } else {
            System.out.println("The letter '" + letter + "' is not present in the word.");
        }
    }
}
Output:

The letter 'e' is present in the word.


Q10. Where exactly is the string constant pool located in the memory?

In Java, the string constant pool is a part of the runtime constant pool, which is a special area of the Java Virtual Machine (JVM) memory. The string constant pool is used to store string literals (e.g., "Hello") and interned strings (strings created using the String.intern() method). It is a way of optimizing memory usage by reusing strings.

The string constant pool is located in the non-heap memory area called the "PermGen" or "Metaspace" (depending on the Java version). In earlier versions of Java (up to Java 7), it was stored in the PermGen (Permanent Generation) memory. However, in Java 8 and later versions, the PermGen space has been replaced with the Metaspace.

The string constant pool is shared among all instances of a particular class and is loaded when the class is loaded by the JVM. It allows strings with the same value to be referenced from different parts of the program, reducing memory overhead.